 
 
 
import unittest
import Polar
import Parser

  
class TestPolarTags( unittest.TestCase ):  
  def test_000_TagDateTime(self):
      polar = Polar.Polar( [ 0x3a,0x20,0x08,0x01,0x12,0x17,0x0a,0x07,0x08,0xdf,0x0f,0x10,0x01,0x18,0x0a,0x12,0x08,0x08,0x0b,0x10,0x2f,0x18,0x00,0x20,0x00,0x18,0x00,0x20,0x78,0x1d,0x00,0x00,0x80 ] )
      tag = polar.find_next_tag()
      assert type(tag) == Polar.TagDateTime
      assert (len(str(tag)) > 10 )
  
  def test_001_TagPaddingDelimToDate(self):
      polar = Polar.Polar( [ 0x00,0x42,0x19,0x0a,])
      tag = polar.get_tag( Polar.TagDelimToDate )
      assert type(tag) == Polar.TagDelimToDate 
      assert polar.done() == True
      
      
      

  
class TestPolarDynamicLen( unittest.TestCase ):
    data = [ 0x3f,0x2a,0x0e,0x6b,0x0e,0x0e,0x7c,0x65,0x06,0x1c,0x6d,0x6f,0x71,0x6d,0x02,0x0c,0x00, 
             0x00,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x25,0x00,0x00,0x68,
             0x40,0x25, 0xFF,0xFF,0xFF,
             0x00,0x3f,0x3f,0x25,0x00,0x00,0x68,
             0x40,0x25, 0xFF,0xFF,0xFF,
             0x40,0x25, 0xFF,0xFF,0xFF,
             ]
    
    def test_000(self):
       polar = Polar.Polar( self.data )
       polar.process()

       #for f in polar.samples:
         #print "%s -- %s " % ( type(f), f)
       
class TestPolarDropUnknown( unittest.TestCase ):
  
    data = [ 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,
             0x40,0x25, 0xFF,0xFF,0xFF,
             0x01,0x02,0x03,0x04,0x05,
           ]
    
    def test_001(self):
       polar = Polar.Polar( self.data )
       polar.process()
       assert type(polar.samples[0]) == Parser.Parser
       assert type(polar.samples[1]) == Polar.TagSample0
       assert type(polar.samples[2]) == Parser.Parser
       
       assert polar.samples[0].parent_offset == 0
       assert polar.samples[2].parent_offset == 10 + 5
       

class TestPolarDropUnknown( unittest.TestCase ):
  
    data = [ 0x00,0x3a,0x20,0x08,0x01,0x12,0x17,0x0a,0x07,0x08,0xdf,0x0f,0x10,0x01,0x18,0x0a,0x12,0x08,0x08,0x0b,0x10,0x2f,0x18,0x00,0x20,0x00,0x18,0x00,0x20,0x78,0x1d,0x00,0x00,0x80,0x3f,0x3a,0x20,0x08,0x03,0x12,0x17,0x0a,0x07,0x08,0xdf,0x0f,0x10,0x01,0x18,0x0a,0x12,0x08,0x08,0x0b,0x10,0x2f,0x18,0x1e,0x20,0x00,0x18,0x00,0x20,0x78 ]
    
    